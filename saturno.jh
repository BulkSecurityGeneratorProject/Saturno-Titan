enum Estado {
    RESERVADO, EXPIRADO, VALIDADO, CONFIRMADO, CANCELADO, FINALIZADO
}

enum Dia {
    LUNES, MARTES, MIERCOLES, JUEVES, VIERNES, SABADO, DOMINGO
}

enum TipoRecurso {
    BAHIA, LAVADERO, ASESOR, TECNICO
}

enum Marca {
    TOYOTA, LEXUS, HINO
}

enum TipoTarea {
    CAMBIO, INSPECCION
}

entity Turno {
	codigoReserva String required,
	fechaHora Instant required,
    duracion Integer required min(0) max(600),
    costo Float required min(0),
    estado Estado required,
    comentario String,
    indicaciones String
}

entity Cliente {
	nombre String required maxlength(100),
    apellido String required maxlength(100),
    email String required pattern(/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/),
    dni Integer min(0) max(99999999),
    telefono String,
    celular String
}

entity Vehiculo {
    patente String required minlength(6) maxlength(7) pattern(/^[A-Z]{2}\d{3}[A-Z]{2}|[A-Z]{3}[0-9]{3}$/),
    anio Integer required min(1950),
    kilometraje Integer required min(0),
    vin String minlength(17) maxlength(18),
    motor String minlength(17) maxlength(18)//chequear longitud max y min del nro de motor
}

entity Modelo {
    codigo String required minlength(3) maxlength(4),
    nombre String required maxlength(100),
    anioInicioProduccion Integer required min(1950),
    anioFinProduccion Integer min(1950),
    marca Marca required   
}

entity PlanMantenimiento {
    codigo String required minlength(3) maxlength(4),
    nombre String required maxlength(100)
}

entity TipoServicio {
	nombre String required maxlength(100),
    codigo String required minlength(3) maxlength(4),
    interno Boolean required,
    adicional Boolean required,
    tipoRecurso TipoRecurso required
}

entity Servicio {
	nombre String required maxlength(100),
    codigo String required minlength(3) maxlength(4),
    kilometraje Integer required min(0),
    duracion Integer required min(0) max(600)
}

entity PrecioServicio {
    precio Float required min(0)
}

entity Tarea {
    codigo String required minlength(3) maxlength(4),
    descripcion String required maxlength(100),
    tipo TipoTarea required
}

entity Agenda {	
    nombre String required maxlength(100),
    tipoRecurso TipoRecurso required,
    fechaDesde LocalDate required,
    fechaHasta LocalDate required,
    email String required pattern(/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/),
    activa Boolean required
}

entity Horario {
	descripcion String required,
    horaDesde Integer min(0) max(23) required,
    horaHasta Integer min(0) max(23) required,
    dia Dia required
}

entity HorarioEspecial {
	descripcion String required,
    horaDesde Integer min(0) max(23) required,
    horaHasta Integer min(0) max(23) required,
    fecha LocalDate required
}

entity DiaNoLaborable {
	descripcion String required,
	fecha LocalDate required
}

relationship ManyToOne {
	Turno{agenda(nombre) required} to Agenda{turno(fechaHora) required}
}

relationship ManyToMany {
	Agenda{horario(descripcion)} to Horario{agenda(fechaDesde)}
}

relationship ManyToMany {
	Agenda{horarioEspecial(descripcion)} to HorarioEspecial{agenda(fechaDesde)}
}

relationship ManyToMany {
	Agenda{diaNoLaborable(descripcion)} to DiaNoLaborable{agenda(fecha)}
}

relationship ManyToMany {
	Turno{servicio(nombre) required} to Servicio{turno(fechaHora) required}
}

relationship ManyToMany {
	Servicio{tarea(codigo) required} to Tarea{servicio(nombre) required}
}

relationship ManyToOne {
	Servicio{tipo(codigo) required} to TipoServicio{servicio(codigo) required} 
}

relationship ManyToOne {
	Vehiculo{modelo(nombre) required} to Modelo{vehiculo(patente) required}
}

relationship OneToMany {
	Cliente{turno(fechaHora) required} to Turno{cliente(apellido) required}
}

relationship ManyToOne {
	Turno{vehiculo(patente) required} to Vehiculo{turno(fechaHora) required}
}

relationship OneToMany {
	Modelo{precio(precio) required} to PrecioServicio{modelo(nombre) required}
}

relationship OneToMany {
	Servicio{precio(precio) required} to PrecioServicio{servicio(nombre) required}
}

relationship OneToMany {
	PlanMantenimiento{servicio(nombre) required} to Servicio{plan(nombre) required}
}

relationship OneToMany {
	PlanMantenimiento{modelo(nombre) required} to Modelo{plan(nombre) required}
}

paginate * with pagination

dto * with mapstruct

// Set service options to all except few
service all with serviceImpl// except Employee, Job